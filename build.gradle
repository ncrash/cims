plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.25.0'
}

group = 'kr.co.kcs'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

idea {
	module {
		excludeDirs += file('bin')
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.2'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'

	annotationProcessor 'io.soabase.record-builder:record-builder-processor:44'
	compileOnly 'io.soabase.record-builder:record-builder-core:44'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mariadb'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	testImplementation 'org.mockito:mockito-core:5.8.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
	testImplementation 'net.bytebuddy:byte-buddy:1.14.10'
	testImplementation 'net.bytebuddy:byte-buddy-agent:1.14.10'
}

test {
	useJUnitPlatform()
	exclude '**/integrationtest/**'

	// Mockito 에이전트 설정 추가
	jvmArgs = [
			'-XX:+EnableDynamicAgentLoading',
			'-javaagent:' + configurations.testRuntimeClasspath.find { it.name.contains('byte-buddy-agent') }.absolutePath
	]
}

// Git hooks 설치를 위한 task 정의
tasks.register('installGitHooks', Copy) {
	from new File(rootProject.rootDir, 'gradle/githooks/pre-commit')
	into { new File(rootProject.rootDir, '.git/hooks') }
	fileMode 0755 // 실행 권한 부여
}

// build task 실행 전에 항상 hook 설치
tasks.getByPath(':build').dependsOn installGitHooks

spotless {
	// 변경된 파일만 검사하도록 설정하여 속도 향상
	ratchetFrom 'origin/main'

	format 'misc', {
		// 불필요한 공백 제거
		target '.gitattributes', '.gitignore'
		trimTrailingWhitespace()
		indentWithSpaces(4)
		endWithNewline()
	}

	java {
		// 캐시 활성화로 증분 포맷팅 지원
		toggleOffOn()

		// Palantir Java Format 사용
		// https://github.com/palantir/palantir-java-format
		palantirJavaFormat('2.50.0')

		// 특정 파일 제외
		targetExclude 'build/**', '.gradle/**'

		// 불필요한 import 정리
		removeUnusedImports()

		// 정렬 규칙
		importOrder('java', 'javax', 'org', 'com', '')
	}
}

tasks.register('integrationTest', Test) {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath

	useJUnitPlatform()
}

sourceSets {
	integrationTest {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output

		java {
			srcDirs = ['src/integrationTest/java']
		}
		resources {
			srcDirs = ['src/integrationTest/resources']
		}
	}
}

configurations {
	// integrationTest 소스 세트가 main, test 소스 세트의 의존성을 포함하도록 설정
	integrationTestImplementation.extendsFrom implementation, testImplementation
	integrationTestRuntimeOnly.extendsFrom runtimeOnly, testRuntimeOnly
}
